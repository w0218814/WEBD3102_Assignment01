package com.example.tododatabase.servlet;

import com.example.tododatabase.dao.UserDAO;
import com.example.tododatabase.model.User;
import org.mindrot.jbcrypt.BCrypt;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet(name = "UserServlet", urlPatterns = {"/user/*"})
public class UserServlet extends HttpServlet {
    private UserDAO userDAO;

    @Override
    public void init() {
        this.userDAO = new UserDAO();
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();

        try {
            switch (action) {
                case "/register":
                    registerUser(request, response);
                    break;
                case "/update":
                    updateUser(request, response);
                    break;
                case "/adminRegister":
                    registerAdmin(request, response); // Handle admin registration
                    break;
                default:
                    redirectToLogin(request, response);
                    break;
            }
        } catch (Exception ex) {
            handleError(request, response, "Database error", ex.getMessage());
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();

        // Handle the register action directly
        if ("/register".equals(action)) {
            showRegistrationForm(request, response);
            return;
        }

        // Session validation for other actions
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            redirectToLogin(request, response);
            return;
        }

        // Handling other actions with session present
        try {
            switch (action) {
                case "/logout":
                    logoutUser(request, response);
                    break;
                case "/adminConsole":
                    showAdminDashboard(request, response);
                    break;
                case "/editUser":
                    editUser(request, response);
                    break;
                default:
                    response.sendRedirect(request.getContextPath() + "/"); // Redirect to a default or home page
                    break;
            }
        } catch (Exception ex) {
            handleError(request, response, "Error processing request", ex.getMessage());
        }
    }

    private void registerAdmin(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        String fullName = request.getParameter("fullName");
        String email = request.getParameter("email");
        String roleName = request.getParameter("role"); // This will be 'admin' or 'user'
        String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt());

        // Convert role name to role ID, ensuring "admin" is 1 and "user" is 2
        int roleId = "admin".equalsIgnoreCase(roleName) ? 1 : 2; // Explicitly set roles

        try {
            User newUser = new User(0, username, fullName, email, roleName); // ID is auto-generated by DB
            userDAO.insertUser(newUser, hashedPassword, roleId);
            // Redirect to the admin console page after successful registration
            response.sendRedirect(request.getContextPath() + "/user/adminConsole");
        } catch (SQLException e) {
            handleError(request, response, "SQL error occurred during user registration", e.getMessage());
        }
    }

    private void updateUser(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Extract user details from the request
        long id = Long.parseLong(request.getParameter("id"));
        String username = request.getParameter("username");
        String fullName = request.getParameter("fullName");
        String email = request.getParameter("email");
        String password = request.getParameter("password"); // Check for password change
        String role = request.getParameter("role"); // Assuming role can be updated

        try {
            // Determine if the password field is provided and not empty
            boolean isPasswordProvided = password != null && !password.trim().isEmpty();

            // Prepare the User object with the updated details
            User user = new User(id, username, fullName, email, role); // Including role for completeness

            // Update user details in the database
            boolean updateResult = userDAO.updateUser(user);

            // If a password is provided, update the password as well
            if (isPasswordProvided) {
                userDAO.updatePassword(id, password);
            }

            // Redirect back to the registration form or an appropriate page
            // You might want to pass a query parameter or set a session attribute to indicate success
            if(updateResult) {
                request.setAttribute("message", "User updated successfully");
            } else {
                request.setAttribute("message", "User update failed");
            }

            // Redirect or forward based on your application flow
            // Here we're forwarding back to the registration form to possibly show a success message
            showRegistrationForm(request, response);
        } catch (Exception e) {
            // Log the exception and redirect to an error handling page or display an error message directly
            handleError(request, response, "Database error", "Error updating user: " + e.getMessage());
        }
    }

    private void registerUser(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        String fullName = request.getParameter("fullName");
        String email = request.getParameter("email");
        String roleName = request.getParameter("role"); // This will be 'admin' or 'user'
        String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt());

        // Convert role name to role ID, ensuring "admin" is 1 and "user" is 2
        int roleId = "admin".equalsIgnoreCase(roleName) ? 1 : 2; // Explicitly set roles

        try {
            User newUser = new User(0, username, fullName, email, roleName); // ID is auto-generated by DB
            userDAO.insertUser(newUser, hashedPassword, roleId);
            response.sendRedirect(request.getContextPath() + "/user/login"); // Redirect after successful registration
        } catch (SQLException e) {
            handleError(request, response, "SQL error occurred during user registration", e.getMessage());
        }
    }



    private void logoutUser(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
            response.sendRedirect(request.getContextPath() + "/user/login");
        }
    }

    private void redirectToLogin(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        response.sendRedirect(request.getContextPath() + "/login");
    }


    private void showRegistrationForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        User currentUser = (session != null) ? (User) session.getAttribute("user") : null;

        // Default to treating as a regular user unless specified otherwise.
        String roleName = (currentUser != null && currentUser.getRoleName() != null) ? currentUser.getRoleName() : "user";
        request.setAttribute("roleName", roleName);

        if ("admin".equalsIgnoreCase(roleName)) {
            // Admin specific logic
            try {
                List<User> users = userDAO.selectAllUsers();
                request.setAttribute("allUsers", users); // Forward all users to the JSP for admin
            } catch (Exception ex) {
                handleError(request, response, "Database error", "Error fetching users: " + ex.getMessage());
                return; // Stop further execution in case of error
            }
            request.getRequestDispatcher("/WEB-INF/views/adminRegister.jsp").forward(request, response);
        } else {
            request.getRequestDispatcher("/WEB-INF/views/register.jsp").forward(request, response);
        }
    }




    private void editUser(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        long userId = Long.parseLong(request.getParameter("userId"));
        try {
            // Select the user by ID
            User user = userDAO.selectUserById(userId);

            // Set the user as an attribute to the request
            request.setAttribute("user", user);

            // Show the registration (or edit) form to the user
            showRegistrationForm(request, response);

            // The call to registerUser here is not appropriate and should be removed

        } catch (SQLException ex) {
            // Handle any SQL exceptions
            handleError(request, response, "Database error", "Error fetching user: " + ex.getMessage());
        }
    }

    private void showProfile(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null && session.getAttribute("user") != null) {
            request.getRequestDispatcher("/WEB-INF/views/profile.jsp").forward(request, response);
        } else {
            redirectToLogin(request, response);
        }
    }

    private void showAdminDashboard(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);

        // Check if the session is valid and if the user is logged in
        if (session != null && session.getAttribute("user") instanceof User) {
            User user = (User) session.getAttribute("user");

            // Check if the user has admin role
            if ("admin".equalsIgnoreCase(user.getRoleName())) {
                // User is authenticated as admin, forward to admin dashboard
                request.getRequestDispatcher("/WEB-INF/views/adminConsole.jsp").forward(request, response);
                return;
            }
        }

        // If session or user is invalid, or user is not admin, redirect to login
        redirectToLogin(request, response);
    }


    private void handleError(HttpServletRequest request, HttpServletResponse response, String title, String message)
            throws ServletException, IOException {
        request.setAttribute("title", title);
        request.setAttribute("message", message);
        request.getRequestDispatcher("/WEB-INF/views/error.jsp").forward(request, response);
    }
}
